% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lmrobdet.R
\name{lmrobdet.control}
\alias{lmrobdet.control}
\title{Tuning parameters for lmrobdetMM and lmrobdetDCML}
\usage{
lmrobdet.control(seed = NULL, bb = 0.5, efficiency = 0.85,
  family = "bisquare", tuning.psi, tuning.chi, max.it = 100,
  refine.tol = 1e-07, rel.tol = 1e-07, refine.PY = 10,
  solve.tol = 1e-07, trace.lev = 0, mts = 1000, compute.rd = FALSE,
  corr.b = TRUE, split.type = "f", initial = "S", psc_keep = 0.5,
  resid_keep_method = "threshold", resid_keep_thresh = 2,
  resid_keep_prop = 0.2, py_maxit = 20, py_eps = 1e-05,
  mscale_maxit = 50, mscale_tol = 1e-06, mscale_rho_fun = "bisquare")
}
\arguments{
\item{seed}{\code{NULL}}

\item{bb}{tuning constant (between 0 and 1/2) for the M-scale used to compute the initial S-estimator. It
determines the robusness (breakdown point) of the resulting MM-estimator, which is
\code{bb}. Defaults to 0.5.}

\item{tuning.psi}{tuning parameters for the re-descending M-estimator as computed by a rho family function. Currently the following are implemented
\link{bisquare}, \link{optimal}, and \link{modified.optimal}. 
It defaults to \code{bisquare(0.85)} which corresponds to an estimator with 85% 
efficiency when errors have a normal distribution.}

\item{tuning.chi}{tuning constant for the function used to compute the M-scale
for the S-estimator. It is currently computed inside \code{lmrobdet.control} to match
the value of \code{bb} below according to the family of rho functions used to specify \code{tuning.psi}.}

\item{max.it}{maximum number of IRWLS iterations for the MM-estimator}

\item{refine.tol}{relative covergence tolerance for the S-estimator}

\item{rel.tol}{relative covergence tolerance for the IRWLS iterations for the MM-estimator}

\item{refine.PY}{number of refinement steps for the Pen~a-Yohai candidates}

\item{solve.tol}{relative tolerance for inversion}

\item{trace.lev}{positive values (increasingly) provide details on the progress of the MM-algorithm}

\item{mts}{maximum number of subsamples. Un-used, but passed (unnecessarily) to the function
that performs M-iterations (lmrob..M..fit), so set here.}

\item{compute.rd}{logical value indicating whether robust leverage distances need to be computed.}

\item{corr.b}{logical value indicating whether a finite-sample correction should be applied
to the M-scale parameter \code{bb}}

\item{split.type}{determines how categorical and continuous variables are split. See
\code{\link[robustbase]{splitFrame}}.}

\item{initial}{string specifying the initial value for the M-step of the MM-estimator. Valid
options are \code{'S'}, for an S-estimator and \code{'MS'} for an M-S estimator which is
appropriate when there are categorical explanatory variables in the model.}

\item{psc_keep}{For \code{pyinit}, proportion of observations to remove based on PSCs. The effective proportion of removed
observations is adjusted according to the sample size to be \code{prosac*(1-p/n)}. See \code{\link{pyinit}}.}

\item{resid_keep_method}{For \code{pyinit}, how to clean the data based on large residuals. If
\code{"threshold"}, all observations with scaled residuals larger than \code{C.res} will
be removed, if \code{"proportion"}, observations with the largest \code{prop} residuals will
be removed. See \code{\link{pyinit}}.}

\item{resid_keep_thresh}{See parameter \code{clean.method} above. See \code{\link{pyinit}}.}

\item{resid_keep_prop}{See parameter \code{clean.method} above. See \code{\link{pyinit}}.}

\item{py_maxit}{Maximum number of iterations. See \code{\link{pyinit}}.}

\item{py_eps}{Relative tolerance for convergence.  See \code{\link{pyinit}}.}

\item{mscale_maxit}{Maximum number of iterations for the M-scale algorithm. See \code{\link{pyinit}}.}

\item{mscale_tol}{Convergence tolerance for the M-scale algorithm. See \code{\link{pyinit}}.}

\item{mscale_rho_fun}{String indicating the loss function used for the M-scale. See \code{\link{pyinit}}.}

\item{psi}{string specifying the type of loss function to be used.}
}
\value{
A list with the necessary tuning parameters.
}
\description{
This function sets tuning parameters for the MM-based Distance Constrained
Maximum Likelihood regression estimators computed by \code{lmrobdet}.
}
\details{
There are 2 sets of tuning parameters: those related to the MM-estimator,
and those controlling the initial Pen~a-Yohai estimator.
}
\examples{
data(coleman)
m2 <- lmrobdet(Y ~ ., data=coleman, control=lmrobdet.control(refine.PY=50))

}
\seealso{
\code{\link{pyinit}}
}
\author{
Matias Salibian-Barrera, \email{matias@stat.ubc.ca}
}
